INFO  02:21:41,201 - #39 program
INFO  02:21:41,205 - #43 kod_gen
INFO  02:21:41,206 - #43 int
INFO  02:21:41,212 - #43 array
INFO  02:21:41,214 - #14 [
INFO  02:21:41,215 - #15 ]
INFO  02:21:41,215 - #25 ;
INFO  02:21:41,222 - #38 class
INFO  02:21:41,224 - #43 Search
INFO  02:21:41,224 - #26 {
INFO  02:21:41,225 - #26 {
INFO  02:21:41,225 - #43 int
INFO  02:21:41,225 - #43 search
INFO  02:21:41,225 - #16 (
INFO  02:21:41,241 - #43 int
INFO  02:21:41,241 - #43 array
INFO  02:21:41,241 - #14 [
INFO  02:21:41,241 - #15 ]
INFO  02:21:41,241 - #21 ,
INFO  02:21:41,241 - #43 int
INFO  02:21:41,241 - #43 l
INFO  02:21:41,241 - #21 ,
INFO  02:21:41,241 - #43 int
INFO  02:21:41,241 - #43 r
INFO  02:21:41,241 - #21 ,
INFO  02:21:41,288 - #43 int
INFO  02:21:41,288 - #43 x
INFO  02:21:41,288 - #17 )
INFO  02:21:41,288 - #26 {
INFO  02:21:41,288 - #28 if
INFO  02:21:41,303 - #16 (
INFO  02:21:41,303 - #43 l
INFO  02:21:41,303 - #9 >
INFO  02:21:41,303 - #43 r
INFO  02:21:41,319 - #17 )
INFO  02:21:41,319 - #34 return
INFO  02:21:41,319 - #6 -
INFO  02:21:41,319 - #42 1
INFO  02:21:41,319 - #25 ;
INFO  02:21:41,319 - #29 do
INFO  02:21:41,350 - #26 {
INFO  02:21:41,350 - #28 if
INFO  02:21:41,350 - #16 (
INFO  02:21:41,350 - #43 array
INFO  02:21:41,350 - #14 [
INFO  02:21:41,350 - #43 l
INFO  02:21:41,350 - #15 ]
INFO  02:21:41,350 - #7 ==
INFO  02:21:41,366 - #43 x
INFO  02:21:41,366 - #17 )
INFO  02:21:41,366 - #26 {
INFO  02:21:41,366 - #34 return
INFO  02:21:41,366 - #6 -
INFO  02:21:41,366 - #43 l
INFO  02:21:41,366 - #25 ;
INFO  02:21:41,366 - #27 }
INFO  02:21:41,366 - #32 else
INFO  02:21:41,366 - #43 l
INFO  02:21:41,366 - #23 ++
INFO  02:21:41,366 - #25 ;
INFO  02:21:41,366 - #27 }
INFO  02:21:41,382 - #30 while
INFO  02:21:41,382 - #16 (
INFO  02:21:41,382 - #43 l
INFO  02:21:41,382 - #12 <=
INFO  02:21:41,382 - #43 r
INFO  02:21:41,382 - #17 )
INFO  02:21:41,382 - #25 ;
INFO  02:21:41,382 - #34 return
INFO  02:21:41,382 - #6 -
INFO  02:21:41,382 - #42 1
INFO  02:21:41,382 - #25 ;
INFO  02:21:41,395 - #27 }
INFO  02:21:41,395 - #27 }
INFO  02:21:41,398 - #27 }
INFO  02:21:41,399 - #38 class
INFO  02:21:41,403 - #43 RecursiveBinarySearch
INFO  02:21:41,403 - #41 extends
INFO  02:21:41,404 - #43 Search
INFO  02:21:41,404 - #26 {
INFO  02:21:41,405 - #26 {
INFO  02:21:41,406 - #43 int
INFO  02:21:41,406 - #43 search
INFO  02:21:41,406 - #16 (
INFO  02:21:41,410 - #43 int
INFO  02:21:41,411 - #43 array
INFO  02:21:41,411 - #14 [
INFO  02:21:41,411 - #15 ]
INFO  02:21:41,412 - #21 ,
INFO  02:21:41,412 - #43 int
INFO  02:21:41,412 - #43 l
INFO  02:21:41,412 - #21 ,
INFO  02:21:41,413 - #43 int
INFO  02:21:41,421 - #43 r
INFO  02:21:41,423 - #21 ,
INFO  02:21:41,424 - #43 int
INFO  02:21:41,424 - #43 x
INFO  02:21:41,425 - #17 )
INFO  02:21:41,429 - #43 int
INFO  02:21:41,429 - #43 mid
INFO  02:21:41,429 - #25 ;
INFO  02:21:41,436 - #26 {
INFO  02:21:41,438 - #28 if
INFO  02:21:41,438 - #16 (
INFO  02:21:41,439 - #43 r
INFO  02:21:41,439 - #10 >=
INFO  02:21:41,440 - #43 l
INFO  02:21:41,445 - #17 )
INFO  02:21:41,446 - #26 {
INFO  02:21:41,446 - #43 mid
INFO  02:21:41,446 - #22 =
INFO  02:21:41,450 - #43 l
INFO  02:21:41,450 - #5 +
INFO  02:21:41,450 - #16 (
INFO  02:21:41,455 - #43 r
INFO  02:21:41,455 - #6 -
INFO  02:21:41,456 - #43 l
INFO  02:21:41,457 - #17 )
INFO  02:21:41,458 - #3 /
INFO  02:21:41,460 - #42 2
INFO  02:21:41,463 - #25 ;
INFO  02:21:41,464 - #28 if
INFO  02:21:41,465 - #16 (
INFO  02:21:41,466 - #43 array
INFO  02:21:41,466 - #14 [
INFO  02:21:41,466 - #43 mid
INFO  02:21:41,467 - #15 ]
INFO  02:21:41,468 - #7 ==
INFO  02:21:41,470 - #43 x
INFO  02:21:41,470 - #17 )
INFO  02:21:41,471 - #34 return
INFO  02:21:41,471 - #43 mid
INFO  02:21:41,471 - #25 ;
INFO  02:21:41,471 - #28 if
INFO  02:21:41,472 - #16 (
INFO  02:21:41,475 - #43 array
INFO  02:21:41,476 - #14 [
INFO  02:21:41,476 - #43 mid
INFO  02:21:41,476 - #15 ]
INFO  02:21:41,477 - #9 >
INFO  02:21:41,477 - #43 x
INFO  02:21:41,477 - #17 )
INFO  02:21:41,478 - #34 return
INFO  02:21:41,478 - #43 search
INFO  02:21:41,478 - #16 (
INFO  02:21:41,480 - #43 array
INFO  02:21:41,480 - #21 ,
INFO  02:21:41,481 - #43 l
INFO  02:21:41,481 - #21 ,
INFO  02:21:41,481 - #43 mid
INFO  02:21:41,481 - #6 -
INFO  02:21:41,481 - #42 1
INFO  02:21:41,481 - #21 ,
INFO  02:21:41,482 - #43 x
INFO  02:21:41,482 - #17 )
INFO  02:21:41,487 - #25 ;
INFO  02:21:41,488 - #34 return
INFO  02:21:41,489 - #43 search
INFO  02:21:41,489 - #16 (
INFO  02:21:41,489 - #43 array
INFO  02:21:41,489 - #21 ,
INFO  02:21:41,489 - #43 mid
INFO  02:21:41,490 - #5 +
INFO  02:21:41,490 - #42 1
INFO  02:21:41,490 - #21 ,
INFO  02:21:41,490 - #43 r
INFO  02:21:41,491 - #21 ,
INFO  02:21:41,491 - #43 x
INFO  02:21:41,491 - #17 )
INFO  02:21:41,491 - #25 ;
INFO  02:21:41,491 - #27 }
INFO  02:21:41,492 - #34 return
INFO  02:21:41,492 - #6 -
INFO  02:21:41,492 - #42 1
INFO  02:21:41,493 - #25 ;
INFO  02:21:41,493 - #27 }
INFO  02:21:41,493 - #27 }
INFO  02:21:41,493 - #27 }
INFO  02:21:41,494 - #38 class
INFO  02:21:41,494 - #43 BinarySearch
INFO  02:21:41,495 - #41 extends
INFO  02:21:41,495 - #43 Search
INFO  02:21:41,495 - #26 {
INFO  02:21:41,495 - #26 {
INFO  02:21:41,496 - #43 int
INFO  02:21:41,496 - #43 search
INFO  02:21:41,496 - #16 (
INFO  02:21:41,497 - #43 int
INFO  02:21:41,497 - #43 array
INFO  02:21:41,497 - #14 [
INFO  02:21:41,497 - #15 ]
INFO  02:21:41,498 - #21 ,
INFO  02:21:41,498 - #43 int
INFO  02:21:41,498 - #43 l
INFO  02:21:41,499 - #21 ,
INFO  02:21:41,499 - #43 int
INFO  02:21:41,499 - #43 r
INFO  02:21:41,499 - #21 ,
INFO  02:21:41,500 - #43 int
INFO  02:21:41,500 - #43 x
INFO  02:21:41,500 - #17 )
INFO  02:21:41,500 - #43 int
INFO  02:21:41,501 - #43 m
INFO  02:21:41,501 - #25 ;
INFO  02:21:41,502 - #26 {
INFO  02:21:41,502 - #43 l
INFO  02:21:41,502 - #22 =
INFO  02:21:41,503 - #42 0
INFO  02:21:41,503 - #25 ;
INFO  02:21:41,503 - #43 r
INFO  02:21:41,503 - #22 =
INFO  02:21:41,503 - #43 len
INFO  02:21:41,504 - #16 (
INFO  02:21:41,504 - #43 array
INFO  02:21:41,504 - #17 )
INFO  02:21:41,504 - #6 -
INFO  02:21:41,505 - #42 1
INFO  02:21:41,505 - #25 ;
INFO  02:21:41,505 - #29 do
INFO  02:21:41,505 - #26 {
INFO  02:21:41,506 - #43 m
INFO  02:21:41,506 - #22 =
INFO  02:21:41,506 - #43 l
INFO  02:21:41,506 - #5 +
INFO  02:21:41,507 - #16 (
INFO  02:21:41,507 - #43 r
INFO  02:21:41,507 - #6 -
INFO  02:21:41,508 - #43 l
INFO  02:21:41,508 - #17 )
INFO  02:21:41,508 - #3 /
INFO  02:21:41,508 - #42 2
INFO  02:21:41,509 - #25 ;
INFO  02:21:41,509 - #28 if
INFO  02:21:41,509 - #16 (
INFO  02:21:41,509 - #43 array
INFO  02:21:41,510 - #14 [
INFO  02:21:41,510 - #43 m
INFO  02:21:41,510 - #15 ]
INFO  02:21:41,510 - #7 ==
INFO  02:21:41,511 - #43 x
INFO  02:21:41,511 - #17 )
INFO  02:21:41,516 - #34 return
INFO  02:21:41,517 - #43 m
INFO  02:21:41,517 - #25 ;
INFO  02:21:41,517 - #28 if
INFO  02:21:41,518 - #16 (
INFO  02:21:41,518 - #43 array
INFO  02:21:41,518 - #14 [
INFO  02:21:41,518 - #43 m
INFO  02:21:41,518 - #15 ]
INFO  02:21:41,528 - #11 <
INFO  02:21:41,529 - #43 x
INFO  02:21:41,531 - #17 )
INFO  02:21:41,531 - #43 l
INFO  02:21:41,531 - #22 =
INFO  02:21:41,560 - #43 m
INFO  02:21:41,572 - #5 +
INFO  02:21:41,573 - #42 1
INFO  02:21:41,573 - #25 ;
INFO  02:21:41,574 - #32 else
INFO  02:21:41,574 - #43 r
INFO  02:21:41,574 - #22 =
INFO  02:21:41,575 - #43 m
INFO  02:21:41,575 - #6 -
INFO  02:21:41,575 - #42 1
INFO  02:21:41,575 - #25 ;
INFO  02:21:41,576 - #27 }
INFO  02:21:41,576 - #30 while
INFO  02:21:41,576 - #16 (
INFO  02:21:41,576 - #43 l
INFO  02:21:41,577 - #12 <=
INFO  02:21:41,577 - #43 r
INFO  02:21:41,577 - #17 )
INFO  02:21:41,577 - #25 ;
INFO  02:21:41,578 - #34 return
INFO  02:21:41,578 - #6 -
INFO  02:21:41,578 - #42 1
INFO  02:21:41,578 - #25 ;
INFO  02:21:41,579 - #27 }
INFO  02:21:41,579 - #27 }
INFO  02:21:41,580 - #27 }
INFO  02:21:41,580 - #38 class
INFO  02:21:41,580 - #43 Helper
INFO  02:21:41,581 - #26 {
INFO  02:21:41,581 - #26 {
INFO  02:21:41,581 - #37 void
INFO  02:21:41,581 - #43 generateArray
INFO  02:21:41,583 - #16 (
INFO  02:21:41,584 - #43 int
INFO  02:21:41,584 - #43 size
INFO  02:21:41,584 - #17 )
INFO  02:21:41,584 - #43 int
INFO  02:21:41,585 - #43 i
INFO  02:21:41,586 - #25 ;
INFO  02:21:41,587 - #26 {
INFO  02:21:41,587 - #43 i
INFO  02:21:41,587 - #22 =
INFO  02:21:41,587 - #42 0
INFO  02:21:41,588 - #25 ;
INFO  02:21:41,588 - #29 do
INFO  02:21:41,588 - #26 {
INFO  02:21:41,588 - #36 read
INFO  02:21:41,589 - #16 (
INFO  02:21:41,589 - #43 array
INFO  02:21:41,589 - #14 [
INFO  02:21:41,589 - #43 i
INFO  02:21:41,590 - #15 ]
INFO  02:21:41,590 - #17 )
INFO  02:21:41,590 - #25 ;
INFO  02:21:41,590 - #43 i
INFO  02:21:41,591 - #23 ++
INFO  02:21:41,591 - #25 ;
INFO  02:21:41,591 - #27 }
INFO  02:21:41,592 - #30 while
INFO  02:21:41,592 - #16 (
INFO  02:21:41,592 - #43 i
INFO  02:21:41,592 - #11 <
INFO  02:21:41,593 - #43 size
INFO  02:21:41,593 - #17 )
INFO  02:21:41,593 - #25 ;
INFO  02:21:41,594 - #27 }
INFO  02:21:41,594 - #37 void
INFO  02:21:41,594 - #43 sortArray
INFO  02:21:41,595 - #16 (
INFO  02:21:41,595 - #17 )
INFO  02:21:41,597 - #43 int
INFO  02:21:41,597 - #43 n
INFO  02:21:41,597 - #25 ;
INFO  02:21:41,597 - #43 int
INFO  02:21:41,598 - #43 i
INFO  02:21:41,598 - #25 ;
INFO  02:21:41,598 - #43 int
INFO  02:21:41,598 - #43 key
INFO  02:21:41,598 - #25 ;
INFO  02:21:41,599 - #43 int
INFO  02:21:41,599 - #43 j
INFO  02:21:41,599 - #25 ;
INFO  02:21:41,599 - #26 {
INFO  02:21:41,600 - #43 n
INFO  02:21:41,600 - #22 =
INFO  02:21:41,600 - #43 len
INFO  02:21:41,600 - #16 (
INFO  02:21:41,600 - #43 array
INFO  02:21:41,600 - #17 )
INFO  02:21:41,601 - #25 ;
INFO  02:21:41,601 - #43 i
INFO  02:21:41,601 - #22 =
INFO  02:21:41,601 - #42 1
INFO  02:21:41,603 - #25 ;
INFO  02:21:41,603 - #29 do
INFO  02:21:41,604 - #26 {
INFO  02:21:41,604 - #43 key
INFO  02:21:41,604 - #22 =
INFO  02:21:41,604 - #43 array
INFO  02:21:41,604 - #14 [
INFO  02:21:41,605 - #43 i
INFO  02:21:41,605 - #15 ]
INFO  02:21:41,605 - #25 ;
INFO  02:21:41,605 - #43 j
INFO  02:21:41,605 - #22 =
INFO  02:21:41,606 - #43 i
INFO  02:21:41,606 - #6 -
INFO  02:21:41,606 - #42 1
INFO  02:21:41,606 - #25 ;
INFO  02:21:41,607 - #28 if
INFO  02:21:41,607 - #16 (
INFO  02:21:41,607 - #43 j
INFO  02:21:41,607 - #10 >=
INFO  02:21:41,608 - #42 0
INFO  02:21:41,608 - #19 &&
INFO  02:21:41,608 - #43 array
INFO  02:21:41,608 - #14 [
INFO  02:21:41,608 - #43 j
INFO  02:21:41,608 - #15 ]
INFO  02:21:41,609 - #9 >
INFO  02:21:41,609 - #43 key
INFO  02:21:41,609 - #17 )
INFO  02:21:41,610 - #29 do
INFO  02:21:41,610 - #26 {
INFO  02:21:41,610 - #43 array
INFO  02:21:41,610 - #14 [
INFO  02:21:41,611 - #43 j
INFO  02:21:41,611 - #5 +
INFO  02:21:41,612 - #42 1
INFO  02:21:41,612 - #15 ]
INFO  02:21:41,612 - #22 =
INFO  02:21:41,612 - #43 array
INFO  02:21:41,613 - #14 [
INFO  02:21:41,613 - #43 j
INFO  02:21:41,613 - #15 ]
INFO  02:21:41,613 - #25 ;
INFO  02:21:41,614 - #43 j
INFO  02:21:41,614 - #22 =
INFO  02:21:41,614 - #43 j
INFO  02:21:41,614 - #6 -
INFO  02:21:41,614 - #42 1
INFO  02:21:41,614 - #25 ;
INFO  02:21:41,615 - #27 }
INFO  02:21:41,615 - #30 while
INFO  02:21:41,615 - #16 (
INFO  02:21:41,616 - #43 j
INFO  02:21:41,616 - #10 >=
INFO  02:21:41,616 - #42 0
INFO  02:21:41,616 - #19 &&
INFO  02:21:41,616 - #43 array
INFO  02:21:41,617 - #14 [
INFO  02:21:41,617 - #43 j
INFO  02:21:41,617 - #15 ]
INFO  02:21:41,617 - #9 >
INFO  02:21:41,617 - #43 key
INFO  02:21:41,617 - #17 )
INFO  02:21:41,618 - #25 ;
INFO  02:21:41,618 - #43 i
INFO  02:21:41,618 - #23 ++
INFO  02:21:41,618 - #25 ;
INFO  02:21:41,619 - #43 array
INFO  02:21:41,619 - #14 [
INFO  02:21:41,619 - #43 j
INFO  02:21:41,619 - #5 +
INFO  02:21:41,619 - #42 1
INFO  02:21:41,619 - #15 ]
INFO  02:21:41,619 - #22 =
INFO  02:21:41,619 - #43 key
INFO  02:21:41,619 - #25 ;
INFO  02:21:41,620 - #27 }
INFO  02:21:41,620 - #30 while
INFO  02:21:41,620 - #16 (
INFO  02:21:41,620 - #43 i
INFO  02:21:41,620 - #11 <
INFO  02:21:41,620 - #43 n
INFO  02:21:41,620 - #17 )
INFO  02:21:41,620 - #25 ;
INFO  02:21:41,621 - #27 }
INFO  02:21:41,621 - #27 }
INFO  02:21:41,621 - #27 }
INFO  02:21:41,621 - #26 {
INFO  02:21:41,621 - #37 void
INFO  02:21:41,621 - #43 printSearchResult
INFO  02:21:41,621 - #16 (
INFO  02:21:41,621 - #43 int
INFO  02:21:41,622 - #43 res
INFO  02:21:41,622 - #17 )
INFO  02:21:41,622 - #26 {
INFO  02:21:41,622 - #28 if
INFO  02:21:41,622 - #16 (
INFO  02:21:41,622 - #43 res
INFO  02:21:41,622 - #8 !=
INFO  02:21:41,622 - #6 -
INFO  02:21:41,624 - #42 1
INFO  02:21:41,624 - #17 )
INFO  02:21:41,624 - #35 print
INFO  02:21:41,624 - #16 (
INFO  02:21:41,624 - #43 res
INFO  02:21:41,624 - #17 )
INFO  02:21:41,626 - #25 ;
INFO  02:21:41,627 - #32 else
INFO  02:21:41,627 - #26 {
INFO  02:21:41,627 - #35 print
INFO  02:21:41,627 - #16 (
INFO  02:21:41,628 - #45 n
INFO  02:21:41,628 - #17 )
INFO  02:21:41,628 - #25 ;
INFO  02:21:41,628 - #35 print
INFO  02:21:41,628 - #16 (
INFO  02:21:41,628 - #45 o
INFO  02:21:41,629 - #17 )
INFO  02:21:41,629 - #25 ;
INFO  02:21:41,629 - #35 print
INFO  02:21:41,629 - #16 (
INFO  02:21:41,629 - #45 t
INFO  02:21:41,629 - #17 )
INFO  02:21:41,629 - #25 ;
INFO  02:21:41,629 - #35 print
INFO  02:21:41,629 - #16 (
INFO  02:21:41,629 - #45 f
INFO  02:21:41,629 - #17 )
INFO  02:21:41,629 - #25 ;
INFO  02:21:41,630 - #35 print
INFO  02:21:41,630 - #16 (
INFO  02:21:41,630 - #45 o
INFO  02:21:41,630 - #17 )
INFO  02:21:41,630 - #25 ;
INFO  02:21:41,630 - #35 print
INFO  02:21:41,631 - #16 (
INFO  02:21:41,631 - #45 u
INFO  02:21:41,631 - #17 )
INFO  02:21:41,631 - #25 ;
INFO  02:21:41,631 - #35 print
INFO  02:21:41,632 - #16 (
INFO  02:21:41,632 - #45 n
INFO  02:21:41,632 - #17 )
INFO  02:21:41,632 - #25 ;
INFO  02:21:41,632 - #35 print
INFO  02:21:41,633 - #16 (
INFO  02:21:41,633 - #45 d
INFO  02:21:41,633 - #17 )
INFO  02:21:41,633 - #25 ;
INFO  02:21:41,633 - #27 }
INFO  02:21:41,634 - #27 }
INFO  02:21:41,634 - #37 void
INFO  02:21:41,634 - #43 main
INFO  02:21:41,634 - #16 (
INFO  02:21:41,634 - #17 )
INFO  02:21:41,635 - #43 Helper
INFO  02:21:41,635 - #43 h
INFO  02:21:41,635 - #25 ;
INFO  02:21:41,635 - #43 int
INFO  02:21:41,635 - #43 size
INFO  02:21:41,636 - #25 ;
INFO  02:21:41,636 - #43 bool
INFO  02:21:41,636 - #43 loop
INFO  02:21:41,636 - #25 ;
INFO  02:21:41,639 - #43 Search
INFO  02:21:41,640 - #43 s
INFO  02:21:41,640 - #25 ;
INFO  02:21:41,640 - #43 int
INFO  02:21:41,640 - #43 res
INFO  02:21:41,640 - #25 ;
INFO  02:21:41,640 - #43 int
INFO  02:21:41,641 - #43 elem
INFO  02:21:41,641 - #25 ;
INFO  02:21:41,641 - #26 {
INFO  02:21:41,641 - #43 loop
INFO  02:21:41,641 - #22 =
INFO  02:21:41,642 - #44 true
INFO  02:21:41,642 - #25 ;
INFO  02:21:41,642 - #29 do
INFO  02:21:41,643 - #26 {
INFO  02:21:41,643 - #36 read
INFO  02:21:41,643 - #16 (
INFO  02:21:41,643 - #43 size
INFO  02:21:41,643 - #17 )
INFO  02:21:41,644 - #25 ;
INFO  02:21:41,644 - #28 if
INFO  02:21:41,644 - #16 (
INFO  02:21:41,644 - #43 size
INFO  02:21:41,645 - #12 <=
INFO  02:21:41,645 - #42 0
INFO  02:21:41,645 - #17 )
INFO  02:21:41,645 - #26 {
INFO  02:21:41,645 - #35 print
INFO  02:21:41,646 - #16 (
INFO  02:21:41,646 - #45 s
INFO  02:21:41,646 - #17 )
INFO  02:21:41,646 - #25 ;
INFO  02:21:41,646 - #35 print
INFO  02:21:41,646 - #16 (
INFO  02:21:41,646 - #45 i
INFO  02:21:41,647 - #17 )
INFO  02:21:41,647 - #25 ;
INFO  02:21:41,647 - #35 print
INFO  02:21:41,647 - #16 (
INFO  02:21:41,647 - #45 z
INFO  02:21:41,647 - #17 )
INFO  02:21:41,648 - #25 ;
INFO  02:21:41,648 - #35 print
INFO  02:21:41,648 - #16 (
INFO  02:21:41,648 - #45 e
INFO  02:21:41,648 - #17 )
INFO  02:21:41,648 - #25 ;
INFO  02:21:41,649 - #35 print
INFO  02:21:41,649 - #16 (
INFO  02:21:41,649 - #45 e
INFO  02:21:41,649 - #17 )
INFO  02:21:41,649 - #25 ;
INFO  02:21:41,649 - #35 print
INFO  02:21:41,649 - #16 (
INFO  02:21:41,650 - #45 r
INFO  02:21:41,650 - #17 )
INFO  02:21:41,650 - #25 ;
INFO  02:21:41,650 - #35 print
INFO  02:21:41,650 - #16 (
INFO  02:21:41,651 - #45 r
INFO  02:21:41,651 - #17 )
INFO  02:21:41,651 - #25 ;
INFO  02:21:41,651 - #35 print
INFO  02:21:41,651 - #16 (
INFO  02:21:41,651 - #45 o
INFO  02:21:41,652 - #17 )
INFO  02:21:41,652 - #25 ;
INFO  02:21:41,652 - #35 print
INFO  02:21:41,652 - #16 (
INFO  02:21:41,652 - #45 r
INFO  02:21:41,652 - #17 )
INFO  02:21:41,653 - #25 ;
INFO  02:21:41,653 - #33 continue
INFO  02:21:41,653 - #25 ;
INFO  02:21:41,653 - #27 }
INFO  02:21:41,655 - #43 array
INFO  02:21:41,655 - #22 =
INFO  02:21:41,656 - #18 new
INFO  02:21:41,656 - #43 int
INFO  02:21:41,656 - #14 [
INFO  02:21:41,657 - #43 size
INFO  02:21:41,657 - #15 ]
INFO  02:21:41,657 - #25 ;
INFO  02:21:41,658 - #43 h
INFO  02:21:41,658 - #22 =
INFO  02:21:41,658 - #18 new
INFO  02:21:41,658 - #43 Helper
INFO  02:21:41,658 - #25 ;
INFO  02:21:41,659 - #43 h
INFO  02:21:41,659 - #13 .
INFO  02:21:41,659 - #43 generateArray
INFO  02:21:41,659 - #16 (
INFO  02:21:41,660 - #43 size
INFO  02:21:41,660 - #17 )
INFO  02:21:41,660 - #25 ;
INFO  02:21:41,660 - #43 h
INFO  02:21:41,661 - #13 .
INFO  02:21:41,661 - #43 sortArray
INFO  02:21:41,661 - #16 (
INFO  02:21:41,662 - #17 )
INFO  02:21:41,663 - #25 ;
INFO  02:21:41,663 - #43 loop
INFO  02:21:41,664 - #22 =
INFO  02:21:41,664 - #44 false
INFO  02:21:41,664 - #25 ;
INFO  02:21:41,664 - #27 }
INFO  02:21:41,671 - #30 while
INFO  02:21:41,671 - #16 (
INFO  02:21:41,671 - #43 loop
INFO  02:21:41,671 - #17 )
INFO  02:21:41,672 - #25 ;
INFO  02:21:41,672 - #43 s
INFO  02:21:41,672 - #22 =
INFO  02:21:41,673 - #18 new
INFO  02:21:41,673 - #43 Search
INFO  02:21:41,673 - #25 ;
INFO  02:21:41,673 - #36 read
INFO  02:21:41,673 - #16 (
INFO  02:21:41,673 - #43 elem
INFO  02:21:41,673 - #17 )
INFO  02:21:41,674 - #25 ;
INFO  02:21:41,674 - #43 res
INFO  02:21:41,674 - #22 =
INFO  02:21:41,675 - #43 s
INFO  02:21:41,675 - #13 .
INFO  02:21:41,675 - #43 search
INFO  02:21:41,675 - #16 (
INFO  02:21:41,675 - #43 array
INFO  02:21:41,675 - #21 ,
INFO  02:21:41,676 - #42 0
INFO  02:21:41,676 - #21 ,
INFO  02:21:41,676 - #43 size
INFO  02:21:41,676 - #6 -
INFO  02:21:41,676 - #42 1
INFO  02:21:41,682 - #21 ,
INFO  02:21:41,683 - #43 elem
INFO  02:21:41,683 - #17 )
INFO  02:21:41,683 - #25 ;
INFO  02:21:41,683 - #43 printSearchResult
INFO  02:21:41,684 - #16 (
INFO  02:21:41,684 - #43 res
INFO  02:21:41,684 - #17 )
INFO  02:21:41,684 - #25 ;
INFO  02:21:41,684 - #43 s
INFO  02:21:41,684 - #22 =
INFO  02:21:41,685 - #18 new
INFO  02:21:41,685 - #43 BinarySearch
INFO  02:21:41,685 - #25 ;
INFO  02:21:41,685 - #43 res
INFO  02:21:41,687 - #22 =
INFO  02:21:41,687 - #43 s
INFO  02:21:41,687 - #13 .
INFO  02:21:41,687 - #43 search
INFO  02:21:41,687 - #16 (
INFO  02:21:41,688 - #43 array
INFO  02:21:41,688 - #21 ,
INFO  02:21:41,688 - #42 0
INFO  02:21:41,688 - #21 ,
INFO  02:21:41,688 - #43 size
INFO  02:21:41,689 - #6 -
INFO  02:21:41,689 - #42 1
INFO  02:21:41,689 - #21 ,
INFO  02:21:41,689 - #43 elem
INFO  02:21:41,689 - #17 )
INFO  02:21:41,690 - #25 ;
INFO  02:21:41,690 - #43 printSearchResult
INFO  02:21:41,690 - #16 (
INFO  02:21:41,690 - #43 res
INFO  02:21:41,690 - #17 )
INFO  02:21:41,691 - #25 ;
INFO  02:21:41,691 - #43 s
INFO  02:21:41,691 - #22 =
INFO  02:21:41,691 - #18 new
INFO  02:21:41,691 - #43 RecursiveBinarySearch
INFO  02:21:41,692 - #25 ;
INFO  02:21:41,692 - #43 res
INFO  02:21:41,692 - #22 =
INFO  02:21:41,692 - #43 s
INFO  02:21:41,692 - #13 .
INFO  02:21:41,693 - #43 search
INFO  02:21:41,693 - #16 (
INFO  02:21:41,693 - #43 array
INFO  02:21:41,693 - #21 ,
INFO  02:21:41,693 - #42 0
INFO  02:21:41,693 - #21 ,
INFO  02:21:41,694 - #43 size
INFO  02:21:41,694 - #6 -
INFO  02:21:41,694 - #42 1
INFO  02:21:41,694 - #21 ,
INFO  02:21:41,695 - #43 elem
INFO  02:21:41,695 - #17 )
INFO  02:21:41,695 - #25 ;
INFO  02:21:41,695 - #43 printSearchResult
INFO  02:21:41,696 - #16 (
INFO  02:21:41,696 - #43 res
INFO  02:21:41,701 - #17 )
INFO  02:21:41,702 - #25 ;
INFO  02:21:41,702 - #27 }
INFO  02:21:41,703 - #27 }
INFO  02:21:52,834 - Detektovana upotreba formalnog parametra l metode search na liniji 5: Var l: Int , 2, 1 
INFO  02:21:52,837 - Detektovana upotreba formalnog parametra r metode search na liniji 5: Var r: Int , 3, 1 
INFO  02:21:52,837 - Detektovana upotreba formalnog parametra array metode search na liniji 8: Var array: Arr of , 1, 1 
INFO  02:21:52,837 - Detektovana upotreba formalnog parametra l metode search na liniji 8: Var l: Int , 2, 1 
INFO  02:21:52,838 - Detektovan pristup elementu niza array na liniji 8: array: Arr of int, -1, -1 
INFO  02:21:52,838 - Detektovana upotreba formalnog parametra x metode search na liniji 8: Var x: Int , 4, 1 
ERROR 02:21:52,838 - Semanticka greska na liniji 8: nije moguce porediti objekte nekompatibilnih tipova!
INFO  02:21:52,839 - Detektovana upotreba formalnog parametra l metode search na liniji 10: Var l: Int , 2, 1 
INFO  02:21:52,839 - Detektovana upotreba formalnog parametra l metode search na liniji 13: Var l: Int , 2, 1 
INFO  02:21:52,840 - Detektovana upotreba formalnog parametra l metode search na liniji 14: Var l: Int , 2, 1 
INFO  02:21:52,840 - Detektovana upotreba formalnog parametra r metode search na liniji 14: Var r: Int , 3, 1 
